
C CONTENT 

1) FUNDAMENTALS HARDWARE SOFTWARE 
PROGRAMING LANGUAGES 
OPERATING SYSTEM 
RAM ROM 
PRIMARY STORAGE DEVICE
SECONDARY STORAGE DEVICE
WHERE PROGRAMM STORED 
HOW PROGRAM EXECUTED BY OS 
EDITORS

2) BASIC STRUCTURES OF C PROGRAM ( WHY FUNCTION 
ENTRY POINT FUNCTION 
OS KIS FUNCTION SE START KARTA HAI )

3) FIRST PROGRAM  (WHAT ARE VARIABLE WHY VAR CREATED, HOW MEMORY ALLOCATED IN MEMORY , WHAT HAPPENS INTERNALLY )
4) COMPILER ENGLISH TO MACHINE CODE  
5) OPERATORS ( ASSIGNEMENT RELATION LOGICLA ARITHMATIC ADDRESS & )
6) ACCPTING INPUT FROM FUNTION (SCANF , FORMAT SPECIFIERS )
7) IF/ ELSE - CONDITION CONSTRUCT (3 APPLICATIONS )
8) LOOPING CONSTRUCT (WHILE FOR DOWHILE TRIANGLES)
9) ARRAY  ( EXAMPLES , PRACTICE , SUM , BIGGEST , ARRAY REVERSE, SEARCHING , HOW MUCH IT  WAS PRESENT )
10) SORTING ALGORITHMS (SORT ARRAY IN  ACCENDING ORDER )
LINEAR SORT, BUBBLE SORT, SELCTION SORT, 
INSERTION SORT , HEAP SORT , 
QUICK SORT , MERGE SORT , 
SHELL SORT .

11) CREATING FUNCTIONS
-ARGUMENTS PASING / PARAMETERS 
RETURN TYPE
BENIFITOF SEPERTE FUNCTION 

12)BINARY SYSTEM (DECIMAL TO BINARY, BINARY T DECIMAL , SIGN BIT , 2S COMPLIMENT )

13) CHARACTERS / ASCII CHART (ASCII CHART PROGRAM) 

14) STRINGS (LENGTH OF STRING , REVERSE ,CONCATINATE , PALINDROME , 
FINDING STRING IN STRING , TRIMMING , WORDS IN STRING , ACCEPTING STRING 
COPY STRING , COPY STRING , LOWER STRING  

15) DATATYPE IDENTIFICATION & POINTERS 
LOGICS IN ARRAY 
PASSING ARRAY TO FUNCTION 
DOING SEPERATE FUNCTION OF POINTER A SSTRING 


16) APPLICATION PROGRAMMING 
CRUD OPERATION (CREATE RETREIVE UPDATE DELETE)

17) STRUCTURES (TO ORGANISE INFORAMTION IN RECORD FORM )
DOING SAME PRATICE OF STRING AND POINTER IN/USING  STRUCTURES 

18) DYNAMIC MEMORY ALLOCATION MALLOC 

DSA->

19) SINGLI LINKED LIST 
20) DOUBLY LINKED LST 
21) BINARY SEARCH TREE
22) AVL TREE 
22) RED BLACK TREE 
23) GRAPH  (TO FIND SHORTEST PATH)

24)FILE HANDLING 
-PRATCING BY FUNCTION STURCTURES AND POINTERS

26)APPICATION (CREATING CRUD APP FWITH FILE HANDLING , ADDING RECORD IN FILE , SEARCHING RECORD)

27) COMMAND LINE ARGUMENTS 

28) LIBRARY CREATION 
(HOW TO WORK IN TEAM ,
HOW TO CREATE FUNCTION , ADDING IN PROTO TYPE , 
HOW THEY WILL CREATE AND COMPIKE LIBRARY ,
HOW OTHER FUCNTION WILL USE THE FUNCTION PRESENT IN PROTYPE
   
-> 
CREATING FUNCTIONS THEN DEFINATION AND THEN LIBRARY 
THEN OW THER PROGRAMMER CAN USE THE LIBRARY TO ACCESS/USE THE FUNCTION .


----------------------------------***------------------------------------------------------------------------------

			C++ CONTENT 

1) OOPS 
2) ENCAPSULATION 
3) POLIMORPHISM 
4) RELATIONSHIP BW ENTITIES 
5) CONTAINERS (ObJECT INSIDE OBJECT )
6) INHERITANCE 
7) METHOD OVERRIDING 
8) ABSTRACT IDEA 
9) C++ ( SIMPICITY IN C++ OVER C ) 
10) NAMESPACE  - HOW CREATED AND CLASSIFIED 
11) CALL BY VALUE nd CALL BY REFERENCE  
12) POLIMIRPHISM IN C++ 
13) ENCAPSULATION IN C++ ( PRIVATE AND PUBLIC MEMBER ) 
14) HOW TO KEEP OBJECT IN VALID STATE 
15) HOW TO WRITE SETTER IF A PROPERTY IS OF ARRAY TYPE.
16) CONTAINER 
17) INHERITANCE (BASE CLASS DERIVED CLASS VISIBILITY MODE )
18) METHOD LOOPUP PATTERN 
19) METHOD OVERIDING 
20) MULTIPLE INHERITANCE (ONE DERIVED CLASS AND MANY BASE CLASS)
21) PROBLEMS ASSCIATED WITH MULTIPLE INHERITANCE 
22) VIRTUAL INHERITANCE 
22) STATIC METHOS 
23) STATIC PROPERTY (ONE COPY OF STATIC PROPERTY IS SHARED BY ALL OBJECTS )
24) PARAMETER WITH DEFAULT AARGUMENTS ) 
25) CONSTRUCTOR (A- EMPTY CONSTRUCTOR B- DEFAUT CONSTRUCTOR C-PARAMETERISED D-DEFAULT ARGUMENT CONSTRUCTOR E-COPY CONSTRUCTOR)
26) CONSTRUCTO EXECUTION SEQUENCE IN CASE OF INHERITANCE 
27) FRIEND FUNCTION 
28) FRIEND CLASS 
29) POINTERS IN C++ 
30) PRINTING ADDRESS
31) DYNAMIC MEMORY ALLOCATION USING OPERATOR 
32) GARBAGE COLLECTION USING DELETE OPERATOR 
33) POINTER TO OBJECT 
34) REFERENCE OPERATOR 
35) THE CONCEPT OF BASE CLASS POINTER CAPABLE OF DERIVED CLASS ONJ.
36) METHOD LOOKUP PATTERN IN CONTEXT TO POINTER 
37) VIRTUAL FUNCTION  NON VIRTUAL FUNCTION
38) HOW TO DESIGN CLASS/ARCHITECTURE OF AN APPLICATION 
39) VIRTUAL POLIMORPHISM 
40) HOW TO DESIGN ABSTRACT CLASSES TO IMPOSE GUIDELINES 
41) THIS POINTER (NON STATIC MEMBER OR METOHD CALLED ) 
42) DESTRUCTOR / VIRTUAL DESTRUCTOR 
43) HOW DESTRUCTOR CLEAN UP MEMORY 
44) OPERATOR OVERLOADING AND ITS IMPORTANCE 
45) OVERLOADING = OPERATOR / COPY CONSTRUCTOR 
45) OVERLOADONG = ARITHMATC OPERATOR +-*/ 
46) OVERLOADING RELATIONAL OPERATORS 
47) OVERLOADING [] OPERATOR 
48) OVERLOADING << AND >> OPERATOR 
49) CREATING AN ARRAYLSIT CLASS 
50) OVERLOADING NEW OPERATOR 
51) OVERLOADING DELETE OPERATOR 
53) OVERLOADING & OPERATOR 
54) CREATING OUR OWN TMSTING CLASS 
TMSRTING g;
g = "GOD IS GREAT";
55)PREDI]EFINE STRING CLASS 
56) CREATING GENREIC FUNCTION 
57) CREATING GENERIC CLASSES 
58) CREATING COLLECTION CLASSES TO REPRESENT 

LIST MAP SET
WRAPPING DATA STRUCTURES
CREATING ITERATORS 

59) STL ( STANDARD TEMPLATE LIBRARY ) 
60) CREATING A DATE CLASS
61) Creating our own File Handling class TMFILE 
TMFILE FILE("WHATEVER.DATA");
FILE<< "COOL";
FILE.CLOSE();

62) PREDEFINE FILE HANDLING CLASSES OFSTREAM/IFSTREAM 
63) CREATING APPLICATION 
HOW APPLICATION ARE BUILD (TEAM WORK) 
PRESENTAION LAYER
LAYERD PROGRAMMING  
BUSSINESS LAYER 
DATA LAYER  
EXCEPTION HANDLING 

64) RDBMS (MYSQL ) SQL 
65) CONNECTING TO MYSQL (C++ PROGRAM) 
66) CHANGING THE DATA LAYER (INSTEAD OF FILE HANDILNG / MYSQL )
67) GUI (GRAPHICAL USER INTERPHASE ) QT 
68) CHANGING THE PRESENTATION LAYER 
69) NETWORK PROGRAMMING (CLIETN /SERVER)
70) MULTITHREDDING 
71) CREATING MULTITHREDED SERVER 
72) COVERTING THE SINGLE USER APPLICATION TO A MULTIUSER NETWORK APPLICATION 
WITHOUT CHANGING EXISTING LAYERS.
BY INTRODUCTION PROXY CLASSES.

73) NOSQL DATABSE (MONGODB) (JSON /BSON)
74) C CODE TO CONNECT TO MONGODB 
75) CREATING C++ WRAPPER TO CONNECT MONGODB 
76) CHANIGN DATA LAYER (MYSQL WILL BE REPACED BY MONGODB )


-------------------------------------***----------------------------------------------------------



